#!/bin/bash
# ---------------------------------------------------------------------------
# set-boot2iso - Set up this machine to boot from iso 

# Copyright 2020, Rov,,, <rov@rov-kvm>
# All rights reserved.

# Usage: set-boot2iso [-h|--help] [-n|--name iso_path]

# Revision history:
# 2020-04-21 Created by gen ver. 3.3
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="0.1"

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
    INT)
      error_exit "Program interrupted by user" ;;
    TERM)
      echo -e "\n$PROGNAME: Program terminated" >&2
      graceful_exit ;;
    *)
      error_exit "$PROGNAME: Terminating on unknown signal" ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [-h|--help] [-n|--name iso_path]"
}

help_message() {
  cat <<- _EOF_
  $PROGNAME ver. $VERSION
  Convert sblive directory into an iso

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
  -n, --name iso_path  name of file
    Where 'iso_path' is the iso file name/path.
  -t, --t run as test, don't write to actual grub files

  NOTE: You must be the superuser to run this script.

_EOF_
  return
}

# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# # Check for root UID
# if [[ $(id -u) != 0 ]]; then
#   error_exit "You must be the superuser to run this script."
# fi

tofile_grub() {
	if $run_as_test ; then
		mkdir -p ./etc/grub.d/
		file="./etc/default/grub"
	else
		file="/etc/default/grub"
	fi

	echo "Setting up ${file}"

	cat <<- 'EOF' > $file
	# grub for sblive
	# If you change this file, run 'update-grub' afterwards to update
	# /boot/grub/grub.cfg.
	# For full documentation of the options in this file, see:
	#   info -f grub -n 'Simple configuration'

	GRUB_DEFAULT="custom_menu"
	#GRUB_TIMEOUT_STYLE=hidden
	GRUB_TIMEOUT=5
	GRUB_DISTRIBUTOR=`lsb_release -i -s 2> /dev/null || echo Debian`
	GRUB_CMDLINE_LINUX_DEFAULT="noresume usbcore.usbfs_memory_mb=1000"
	GRUB_CMDLINE_LINUX=""
	#GRUB_CMDLINE_LINUX="reboot=efi fsck.mode=force fsck.repair=yes"

	# Uncomment to enable BadRAM filtering, modify to suit your needs
	# This works with Linux (no patch required) and with any kernel that obtains
	# the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)
	#GRUB_BADRAM="0x01234567,0xfefefefe,0x89abcdef,0xefefefef"

	# Uncomment to disable graphical terminal (grub-pc only)
	#GRUB_TERMINAL=console

	# The resolution used on graphical terminal
	# note that you can use only modes which your graphic card supports via VBE
	# you can see them in real GRUB with the command vbeinfo
	#GRUB_GFXMODE=640x480

	# Uncomment if you dont want GRUB to pass "root=UUID=xxx" parameter to Linux
	#GRUB_DISABLE_LINUX_UUID=true

	# Uncomment to disable generation of recovery mode menu entries
	#GRUB_DISABLE_RECOVERY="true"

	# Uncomment to get a beep at grub start
	#GRUB_INIT_TUNE="480 440 1"
	EOF
	sudo chmod +744 $file
}

tofile_40_custom() {
	if $run_as_test ; then
		mkdir -p ./etc/default/
		file="./etc/grub.d/40_custom"
	else
		file="/etc/grub.d/40_custom"
	fi

	echo "Setting up ${file}"

	cat <<- 'EOF' > $file
	#!/bin/sh
	exec tail -n +3 $0
	# This file provides an easy way to add custom menu entries.  Simply type the
	# menu entries you want to add after this comment.  Be careful not to change
	# the 'exec tail' line above.

	menuentry "ROV_live_iso"  $menuentry_id_option "custom_menu" {
	    kernelopts="   "
	    loopback loop "ROV_live_iso"
	    linux (loop)/casper/vmlinuz boot=casper iso-scan/filename="ROV_live_iso" usbcore.usbfs_memory_mb=1000
	    initrd (loop)/casper/initrd.gz
	}
	EOF

	# update isopath in the file
	sed -i 's|ROV_live_iso|'$iso_path'|g' $file
	sudo chmod +744 $file
}
# Parse command-line
run_as_test=false
while [[ -n $1 ]]; do
  case $1 in
	-h | --help) 	help_message; graceful_exit ;;
	-n | --name) 	shift; iso_path="$1" ;;
	-t | --test)	run_as_test=true ;;
    -* | --*) 		usage; error_exit "Unknown option $1" ;;
	*)				break ;;
  esac
  shift
done


# Main logic

RED='\033[0;31m';  GRN='\033[0;32m';  BLU='\033[0;34m';  YEL='\033[1;33m';  
NC='\033[0m' # No Color

echo ""
echo -e "${GRN} ################################################# ${NC} "
echo -e "${GRN} #########  Set up to boot from iso  ############ ${NC}"
echo -e "${GRN} ################################################# ${NC}"
set -e  # exit immediately on error

[ ! -f "$iso_path" ] && { echo -e "${RED} [Error]:${NC} file: ${RED}"$iso_path"${NC} does not exist" ; exit ;}

iso_path=$(readlink -f $iso_path)   # absolute filepath
echo -e "${GRN} iso_path:  \e[0m $iso_path"

# run as sudo
if ! $run_as_test && [ "$EUID" -ne 0 ]; then
	{ echo "Please run as root"; exit; }  
fi

echo -e " ${YEL}  Do you wantthe PC to boot to this ${GRN}$iso_path$ ${YEL} ?  "
read -p '          Y/N ? ' -n 1 -r
echo -e "${NC}"

if [[ $REPLY =~ ^[Yy]$ ]]; then
	
	# cp ./default_grub  /etc/default/grub
	tofile_40_custom
	tofile_grub
	# cp ./grub-files/40_custom  /etc/grub.d/40_custom
	# if [[ -n "$iso_path" ]]; then
	# 	sed -i 's|ROV_live_iso|'$iso_path'|g' "/etc/grub.d/40_custom"
	# fi
	if ! $run_as_test  ; then  update-grub ; fi
fi


graceful_exit
